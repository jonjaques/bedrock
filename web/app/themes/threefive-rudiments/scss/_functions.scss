// functions.scss - functions

// Vars (global font base)
$base-font-size: 16px !default;

// ========================================
//  Conversions
//  @author: Zurb Foundation
// ========================================

// Strip Unit
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

// Convert to rem
@function convert-to-rem($value, $base-value: $base-font-size)  {
    $value: strip-unit($value) / strip-unit($base-value) * 1rem;
    @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
    @return $value;
}

// Convert rem to pixel
@function convert-rem-to-px($value, $base-value: $base-font-size) {
    $value: strip-unit($value) * strip-unit($base-value) * 1px;
    @return $value;
}

// Convert pixel to em
@function px-to-em($value, $base-value: $base-font-size) {
    @return ($value / $base-value) * 1em;
}

// ========================================
//  Base Sizing
// ========================================

// Rem-calc
// @author: Zurb Foundation
@function rem-calc($values, $base-value: $base-font-size) {

    // NOTE:
    // New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
    // Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported: rem-calc(10 20 30px 40);
    // Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets: rem-calc((10, 20, 30, 40px));
    // Optionally call with a different base (eg: 8px) to calculate rem: rem-calc(16px 32px 48px, 8px);
    // If you require to comma separate your list: rem-calc((16px, 32px, 48), 8px);

    $max: length($values);

    @if $max == 1 {
        @return convert-to-rem(nth($values, 1), $base-value);
    }

    $remValues: ();

    @for $i from 1 through $max {
        $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
    }

    @return $remValues;

}